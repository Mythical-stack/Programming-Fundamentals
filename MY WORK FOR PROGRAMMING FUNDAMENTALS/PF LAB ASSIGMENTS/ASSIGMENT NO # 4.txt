TASK NO 1:
#include <iostream>
#include <conio.h>
#include <string>
#include <iomanip>
using namespace std;
bool search_element(int A[2][2])
{
	int search;
	cout<<"Enter the element to be searched:";
	cin>>search;
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<2; j++)
		{
			if (search==A[i][j])
			return true;
			
		}
	}
	return false;
}
void multiply(int A[2][2])
{
	int num;
	cout<<"Enter the number to be multiplied with this Array:";
	cin>>num;
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<2; j++)
		{
			A[i][j]=A[i][j]*num;
		}
	}
}
void subtract(int A[2][2])
{
	int num;
	cout<<"Enter the number to be subtracted with this Array:";
	cin>>num;
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<2; j++)
		{
			A[i][j]=A[i][j]-num;
		}
	}
}
void add(int A[2][2])
{
	int num;
	cout<<"Enter the number to be added with this Array:";
	cin>>num;
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<2; j++)
		{
			A[i][j]=A[i][j]+num;
		}
	}
}
bool compare_arrays(int A[2][2], int B[2][2])
{
	int count_true=0,count_false=0;
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<2; j++)
		{
			if (A[i][j]>B[i][j])
			count_false++;
			if (A[i][j]<B[i][j])
			count_true++;
		}
	}
	if (count_true>count_false)
	return true;
	else 
	return false;
}
int main()
{
	int Array1[2][2],Array2[2][2];
	cout<<"Enter the element of the First Array:"<<endl;
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<2; j++)
		{
			cout<<"["<<i<<"]"<<"["<<j<<"]:";
			cin>>Array1[i][j];	
		}
	}
	bool found=search_element(Array1);
	if (found==true)
	cout<<"The value is found in the Array"<<endl;
	else if (found==false)
	cout<<"The value is not found in the Array"<<endl;
	multiply(Array1);
	cout<<"Array after Multiplication:"<<endl;
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<2; j++)
		{
			cout<<Array1[i][j]<<" ";
		}
		cout<<endl;
	}
	subtract(Array1);
	cout<<"Array after Subtaction:"<<endl;
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<2; j++)
		{
			cout<<Array1[i][j]<<" ";
		}
		cout<<endl;
	}
	add(Array1);
	cout<<"Array after Addition:"<<endl;
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<2; j++)
		{
			cout<<Array1[i][j]<<" ";
		}
		cout<<endl;
	}
	cout<<"Enter the element of the Second Array:"<<endl;
	for (int i=0; i<2; i++)
	{
		for (int j=0; j<2; j++)
		{
			cout<<"["<<i<<"]"<<"["<<j<<"]:";
			cin>>Array2[i][j];	
		}
	}
	bool  greater=compare_arrays(Array1,Array2);
	if (greater==true)
	cout<<"Second array is bigger then the first array."<<endl;
	else if (greater==false)
	cout<<"First array is bigger then the second array."<<endl;
	return 0;
}

TASK NO 2:
#include<iostream>
#include<string>
Using namespace std;
Int main()
{
void canidates_name(string names[5])
{
	cout<<"Enter the names of the Canidates:"<<endl;
	for (int i=0; i<5; i++)
	{
		cin>>names[i];
	}
}
void no_of_votes(string names[5],int votes[5])
{
	for (int i=0; i<5; i++)
	{
		cout<<"Number of votes of "<<names[i]<<" are:";
		cin>>votes[i];
	}
}
int total_votes(int votes[5])
{
	int sum=0;
	for (int i=0; i<5; i++)
	{
		sum=sum+votes[i];
	}
	return sum;
}
void percent_of_votes(int votes[5], double percent[5],int total_votes)
{
	double a=(100.0/static_cast<double>(total_votes));
	for (int i=0; i<5; i++)
	{
		percent[i]=votes[i]*a;
	}
}
void election_winner(string name[],int votes[])
{
	int max=0;
	int index;
	for (int i=0; i<5; i++)
	{
		if (max<votes[i])
		{
			max=votes[i];
			index=i;
		}
	}
	cout<<"The Winner of the Election is:"<<name[index];
}
int main()
{
	string names[5];
	int votes[5];
	double per[5];
	canidates_name(names);
	cout<<endl;
	no_of_votes(names,votes);
	cout<<endl;
	int total=total_votes(votes);
	percent_of_votes(votes,per,total);
	cout<<"Canidate"<<"\t"<<"Votes Recived"<<"\t"<<"% of total votes"<<endl;
	for (int i=0; i<5; i++)
	{
		cout<<names[i]<<"\t"<<"\t"<<votes[i]<<"\t"<<"\t"<<setprecision(4)<<per[i]<<endl;
	}
	cout<<"Total"<<"\t"<<"\t"<<total<<endl;
	election_winner(names,votes);
	return 0;
}

TASK NO 1:
#include <iostream>
#include <iomanip>
#include <string>
#include <cctype>
#include <cstring>
using namespace std;
const int NUMROWS = 14;
const int NUMSEATS = 7;
void initPlane(char plane[NUMROWS][NUMSEATS]);
void printPlane(const char msg[], char plane[NUMROWS][NUMSEATS]);
void  checkType( char  &ticketType );
void typeCheck( char ticketType ,int &row, char &seat );
int main()
{
  int seatsTaken = 0;
  int seats = (NUMROWS - 1) * (NUMSEATS - 1);
  char plane[NUMROWS][NUMSEATS];
  char keepGoing = 'y';
  int row = 0; 
  char seat;
  int rowIndex, seatIndex;
  char ticketType;
   initPlane(plane);
  cout << "Choose your seat!" << endl;
  while (seatsTaken < seats && keepGoing == 'y')
    {
      
      printPlane("Plane layout; X designates taken seats", plane);
      cout << endl;
      
      cout << "\n" ;
      ticketType = toupper(ticketType);
      checkType ( ticketType);
      typeCheck( ticketType,row,seat);
     
      
      rowIndex = row;
      
      seatIndex = toupper(seat) - 'A' + 1;
      
      /*if ( seat == 'A' || seat == 'a' )
      seatIndex = 1;
      else if ( seat == 'B' || seat == 'b' )
      seatIndex = 2;
      else if ( seat == 'C' || seat == 'c' )
      seatIndex = 3;
      else if ( seat == 'D' || seat == 'd' )
      seatIndex = 4;
      else if ( seat == 'E' || seat == 'e' )
      seatIndex = 5;
      else if ( seat == 'F' || seat == 'f' )
      seatIndex = 6;*/
     
      if (plane[rowIndex][seatIndex] == 'X')
	cout << "Sorry, " << row << seat << " is already taken." << endl;
      else
	{
	  cout << "OK, you've got " << row << seat << endl;
	  plane[rowIndex][seatIndex] = 'X';
	  seatsTaken++;
	}
      
      if (seatsTaken < seats)
	{
	cout << "Choose another seat? (y/n) ";
	cin >> keepGoing;
	}
      else
	cout << "Plane is now full!" << endl;
    }
    printPlane("Final seating chart", plane);
    
    return 0;
    
} 
 void initPlane(char plane[NUMROWS][NUMSEATS])
{
     int x,y;
     plane[0][0] = ' ';
     for (x = 1; x < NUMROWS; x++)
     {
         plane[0][x] = 'A' + (x - 1);
     }
     for (x = 1; x < NUMROWS; x++)
     {
         for ( y = 0 ; y < 13 ; y++)
         plane[x][y] = ' ';
         }
    
     for (x = 1; x < NUMROWS ; x++)
     {
         for ( y = 1 ; y < NUMSEATS ; y++)
         plane[x][y] = '*';
     }
}
void printPlane(const char msg[], char plane[NUMROWS][NUMSEATS])
{
     cout << msg << endl;
     int Row,col;
     for ( Row = 0; Row < NUMROWS  ; Row ++)
     {
         if (Row == 0)
         cout << "     " ;
         else if (Row != 0) 
         cout << "ROw " << Row;
         if (Row < 10 )
         cout << " ";
         for (col = 0; col < NUMSEATS; col++)
         cout << setw(2) << plane [Row][col] << " ";
         cout << endl;
         
     }
}
void  checkType( char  &ticketType )
{
     
      bool needInput = true;
      while(needInput)
      {
                      cout << "Row 1 and 2 are first clss. " << endl;
      cout << "Rows 3 through 7 are business class. " << endl;
      cout << "Rows 8 through 13 are economy class. " << endl << "\n";
      cout << "Enter ticket type " << endl
           <<"Enter 'F'  for first class " << endl
           << "Enter 'N' for Economy non smoking class " <<endl
           <<"Enter 'S' Economy smoking class  :" ;
      cin >> ticketType;
      cout << "\n";
      ticketType = toupper(ticketType);
      if (ticketType == 'F')
      needInput = false;
      else if (ticketType == 'N')
      needInput = false;
      else if (ticketType == 'S')
      needInput = false;
      else
      {
          needInput = true;
          cout << "Invalid input. try again " << endl;
          cout << "\n";
           }
      }
      }
void typeCheck( char ticketType ,int &row, char &seat )
{
     bool needInput;
     if ( ticketType == 'F')
    {  needInput = true;
  while(needInput)
  {
     cout << "Enter the row(1-2) and seat(A-F) you would like (e.g., 3D): ";
                  cin >> row >> seat;
                  cout << "\n";
                  seat = toupper(seat);
                  if ((row >= 1) && (row <= 2))
                  {
                           
                           
                             if( seat == 'A')
                             needInput = false;
                             else if ( seat == 'B')
                             needInput = false;
                             else if ( seat == 'C')
                             needInput = false;
                             else if ( seat == 'D')
                             needInput = false;
                             else if (seat == 'E' )
                             needInput = false;
                             else if ( seat == 'F')
                             needInput = false;
                             else
                             {needInput = true;
                             cout << "Invalid input. try again " << endl;}
                             cout << "\n";
                              }
                              else 
                              {cout << "Invalid input. try again " << endl;
                              cout << "\n";}
                  }
                  }
          else if ( ticketType == 'N')    
           { needInput = true;
  while(needInput)
  {
     cout << "Enter the row(3-7) and seat(A-F) you would like (e.g., 3D): ";
                  cin >> row >> seat;
                  cout << "\n";
                  seat = toupper(seat);
                  if ((row >= 3) && (row <= 7))
                  {
                           
                           
                             if( seat == 'A')
                             needInput = false;
                             else if ( seat == 'B')
                             needInput = false;
                             else if ( seat == 'C')
                             needInput = false;
                             else if ( seat == 'D')
                             needInput = false;
                             else if (seat == 'E' )
                             needInput = false;
                             else if ( seat == 'F')
                             needInput = false;
                             else
                             {needInput = true;
                             cout << "Invalid input. try again " << endl;}
                              cout << "\n";}
                              else 
                              {cout << "Invalid input. try again " << endl;
                              cout << "\n";}
                  } 
                  }
                  else if ( ticketType == 'S')
                  {needInput = true;
  while(needInput)
  {
     cout << "Enter the row(8-13) and seat(A-F) you would like (e.g., 3D): ";
                  cin >> row >> seat;
                  cout << "\n";
                  seat = toupper(seat);
                  if ((row >= 8) && (row <= 13))
                  {
                           
                           
                             if( seat == 'A')
                             needInput = false;
                             else if ( seat == 'B')
                             needInput = false;
                             else if ( seat == 'C')
                             needInput = false;
                             else if ( seat == 'D')
                             needInput = false;
                             else if (seat == 'E' )
                             needInput = false;
                             else if ( seat == 'F')
                             needInput = false;
                             else
                             {needInput = true;
                             cout << "Invalid input. try again " << endl;}
                              cout << "\n";}
                              else 
                             {cout << "Invalid input. try again " << endl;
                             cout << "\n";}
                  } 
                  }
                  
                  }

