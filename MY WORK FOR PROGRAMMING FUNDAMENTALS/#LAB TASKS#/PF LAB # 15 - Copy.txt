*/Q # 1.  Write a headerfile name (matrix.h) that contains the following functions  
 
• Scalar_Add(int a[2][2]) //Ask user to enter a number and print scalar addition result 
• Scalar _Sub(int a[2][2]) // Ask user to enter a number and print scalar subtraction result 
• Scalar _Mul (int a[2][2]) // Ask user to enter a number and print scalar multiplication result 
• Matrix_Add(int a[2][2] , int b[2][2]) //print the matrix addition result 
• Matrix_Sub(int a[2][2] , int b[2][2]) //print the matrix subtraction result 
• Matrix_mul(int a[2][2] , int b[2][2]) //print the matrix multiplication result 
• Transpose(int  a[2][2]) //print the transpose of the matrix 
 • Adjoint(int a[2][2]))//print the adjoint of matrix 
• Determinant (int a[2][2])//print the determinant of matrix 
• Inverse(int a[2][2]) //print the inverse of matrix 
• Identity (int a[2][2]) //return true if the given matrix is identity matrix else return false. 
 
Create a .cpp  file, include the header file you make(#include “number.h”) and call all the functions of header file from the main function.*/

LAB TASK 15;

#include<iostream>
#include<matric.h>
#include<number.h>
using namespace std;

void scaleradd(int a[2][2])
{
	 int row, col, m1[10][10], m2[10][10], sum[10][10];

   cout<<"Enter the number of rows(should be >1 and <10): ";
   cin>>row;
   cout<<"Enter the number of column(should be >1 and <10): ";
   cin>>col;
   cout << "Enter the elements of first 1st matrix: ";
   for (int i = 0;i<row;i++ ) {
     for (int j = 0;j < col;j++ ) {
       cin>>m1[i][j];
     }
   }
   cout << "Enter the elements of first 1st matrix: ";
   for (int i = 0;i<row;i++ ) {
     for (int j = 0;j<col;j++ ) {
       cin>>m2[i][j];
     }
   }

   cout<<"Output: ";
   for (int i = 0;i<row;i++ ) {
      for (int j = 0;j<col;j++ ) {
        sum[i][j]=m1[i][j]+m2[i][j];
        cout<<sum[i][j]<<" ";
      }
   }

}
void subtract(int A[][N], int B[][N], int C[][N])  
{  
    int i, j;  
    for (i = 0; i < N; i++)  
        for (j = 0; j < N; j++)  
            C[i][j] = A[i][j] - B[i][j];  
}  
void scaler_mul(int a[2][2])
{
	int a[10][10], b[10][10], mult[10][10], r1, c1, r2, c2, i, j, k;

    cout << "Enter rows and columns for first matrix: ";
    cin >> r1 >> c1;
    cout << "Enter rows and columns for second matrix: ";
    cin >> r2 >> c2;

    
    while (c1!=r2)
    {
        cout << "Error! column of first matrix not equal to row of second.";

        cout << "Enter rows and columns for first matrix: ";
        cin >> r1 >> c1;

        cout << "Enter rows and columns for second matrix: ";
        cin >> r2 >> c2;
    }

    cout << endl << "Enter elements of matrix 1:" << endl;
    for(i = 0; i < r1; ++i)
        for(j = 0; j < c1; ++j)
        {
            cout << "Enter element a" << i + 1 << j + 1 << " : ";
            cin >> a[i][j];
        }


    cout << endl << "Enter elements of matrix 2:" << endl;
    for(i = 0; i < r2; ++i)
        for(j = 0; j < c2; ++j)
        {
            cout << "Enter element b" << i + 1 << j + 1 << " : ";
            cin >> b[i][j];
        }


    for(i = 0; i < r1; ++i)
        for(j = 0; j < c2; ++j)
        {
            mult[i][j]=0;
        }

    for(i = 0; i < r1; ++i)
        for(j = 0; j < c2; ++j)
            for(k = 0; k < c1; ++k)
            {
                mult[i][j] += a[i][k] * b[k][j];
            }

    cout << endl << "Output Matrix: " << endl;
    for(i = 0; i < r1; ++i)
    for(j = 0; j < c2; ++j)
    {
        cout << " " << mult[i][j];
        if(j == c2-1)
            cout << endl;
    }
}
int matric_add(int a[2][2])
{
int r, c, a[100][100], b[100][100], sum[100][100], i, j;

    cout << "Enter number of rows (between 1 and 100): ";
    cin >> r;

    cout << "Enter number of columns (between 1 and 100): ";
    cin >> c;

    cout << endl << "Enter elements of 1st matrix: " << endl;

    for(i = 0; i < r; ++i)
       for(j = 0; j < c; ++j)
       {
           cout << "Enter element a" << i + 1 << j + 1 << " : ";
           cin >> a[i][j];
       }

    cout << endl << "Enter elements of 2nd matrix: " << endl;
    for(i = 0; i < r; ++i)
       for(j = 0; j < c; ++j)
       {
           cout << "Enter element b" << i + 1 << j + 1 << " : ";
           cin >> b[i][j];
       }

    for(i = 0; i < r; ++i)
        for(j = 0; j < c; ++j)
            sum[i][j] = a[i][j] + b[i][j];

    cout << endl << "Sum of two matrix is: " << endl;
    for(i = 0; i < r; ++i)
        for(j = 0; j < c; ++j)
        {
            cout << sum[i][j] << "  ";
            if(j == c - 1)
                cout << endl;
        }
}
void matric_sub(int a[2][2])
{
	int m1[3][3], m2[3][3], m3[3][3];
 
	cout<<"Enter first matrix elements: "<<endl;
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
			cin>>m1[i][j];
		}
	}
 
	cout<<"Enter second matrix elements: "<<endl;
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
			cin>>m2[i][j];
		}
	}
 
    for(int i=0;i<3;i++)
    {
    	for(int j=0;j<3;j++)
    	{
    		m3[i][j]=m1[i][j]-m2[i][j];
		}
	}
 
	cout<<"Subtraction of two matrices: "<<endl;
	for(int i=0;i<3;i++)
    {
    	for(int j=0;j<3;j++)
    	{
    		cout<<m3[i][j]<<"  ";
		}
		cout<<endl;
	}
}
void matric_mul(int a[2][2])
{
	 int product[10][10], r1=2, c1=3, r2=3, c2=3, i, j, k;
   int a[2][3] = { {2, 4, 1} , {2, 3, 9} };
   int b[3][3] = { {1, 2, 3} , {3, 6, 1} , {2, 9, 7} };
   if (c1 != r2) {
      cout<<"Column of first matrix should be equal to row of second matrix";
   } else {  
      cout<<"The first matrix is:"<<endl;
      for(i=0; i<r1; ++i) {  
         for(j=0; j<c1; ++j)
            cout<<a[i][j]<<" ";
         cout<<endl;
      }
      cout<<endl;
      cout<<"The second matrix is:"<<endl;
      for(i=0; i<r2; ++i) {  
         for(j=0; j<c2; ++j)
            cout<<b[i][j]<<" ";
         cout<<endl;
      }
      cout<<endl;
      for(i=0; i<r1; ++i)
         for(j=0; j<c2; ++j) {
            product[i][j] = 0;
         }
      for(i=0; i<r1; ++i)
         for(j=0; j<c2; ++j)
            for(k=0; k<c1; ++k) {
               product[i][j]+=a[i][k]*b[k][j];
            }
            cout<<"Product of the two matrices is:"<<endl;
            for(i=0; i<r1; ++i) {   
               for(j=0; j<c2; ++j)
                  cout<<product[i][j]<<" ";
               cout<<endl;
            }
   }
}
void transpose(int a[2][2])
{
   int a[10][10], transpose[10][10], row, column, i, j;

   cout << "Enter rows and columns of matrix: ";
   cin >> row >> column;

   cout << "\nEnter elements of matrix: " << endl;

   for (int i = 0; i < row; ++i) {
      for (int j = 0; j < column; ++j) {
         cout << "Enter element a" << i + 1 << j + 1 << ": ";
         cin >> a[i][j];
      }
   }

  
   cout << "\nEntered Matrix: " << endl;
   for (int i = 0; i < row; ++i) {
      for (int j = 0; j < column; ++j) {
         cout << " " << a[i][j];
         if (j == column - 1)
            cout << endl << endl;
      }
   }

   for (int i = 0; i < row; ++i)
      for (int j = 0; j < column; ++j) {
         transpose[j][i] = a[i][j];
      }

   cout << "\nTranspose of Matrix: " << endl;
   for (int i = 0; i < column; ++i)
      for (int j = 0; j < row; ++j) {
         cout << " " << transpose[i][j];
         if (j == row - 1)
            cout << endl << endl;
      }
}
int determinant(int A[N][N], int n) 
{ 
    int D = 0;
   
    if (n == 1) 
        return A[0][0]; 
  
    int temp[N][N]; // To store cofactors 
  
    int sign = 1;  // To store sign multiplier 
  
    
    for (int f = 0; f < n; f++) 
    { 
    
        D += sign * A[0][f] * determinant(temp, n - 1); 

        sign = -sign; 
    } 
  
    return D; 
} 
  
// Function to get adjoint of A[N][N] in adj[N][N]. 
void adjoint(int A[N][N],int adj[N][N]) 
{ 
    if (N == 1) 
    { 
        adj[0][0] = 1; 
        return; 
    } 
  
    // temp is used to store cofactors of A[][] 
    int sign = 1, temp[N][N]; 
  
    for (int i=0; i<N; i++) 
    { 
        for (int j=0; j<N; j++) 
        { 
            sign = ((i+j)%2==0)? 1: -1; 
            adj[j][i] = (sign)*(determinant(temp, N-1)); 
        } 
    } 
} 
 
bool inverse(int A[N][N], float inverse[N][N]) 
{ 
    // Find determinant of A[][] 
    int det = determinant(A, N); 
    if (det == 0) 
    { 
        cout << "Singular matrix, can't find its inverse"; 
        return false; 
    } 
  
    // Find adjoint 
    int adj[N][N]; 
    adjoint(A, adj); 
  
    for (int i=0; i<N; i++) 
        for (int j=0; j<N; j++) 
            inverse[i][j] = adj[i][j]/float(det); 
  
    return true; 
} 
void identity(int a[2][2])
{
	
    int i, j, m, n, A[10][10], flag = 0;
    cout << "Enter number of rows and columns : ";
    cin >> m >> n;
    if (m != n)
    {
        cout << "Matrix is not a square matrix!";
        exit(0);
    }
    cout << "Enter array elements : ";
    for (i = 0; i < m; i++)
        for (j = 0; j < n; j++)    
            cin >> A[i][j];
    for (i = 0; i < m; i++)
        for (j = 0; j < n; j++)
        {
            if ((A[i][j] != 1) && (A[j][i] != 0))
            {
                flag = 1;
                break;
            }
        }
    if (flag == 0)
        cout << "The given array is an identity matrix.\n ";
    else
        cout << "The given array is not an identity matrix.\n ";
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)	
            cout << A[i][j] << " ";
        cout << "\n ";
    }
}

int main()  
{  
    int A[N][N] = { {1, 1, 1, 1},  
                    {2, 2, 2, 2},  
                    {3, 3, 3, 3},  
                    {4, 4, 4, 4}};  
  
    int B[N][N] = { {1, 1, 1, 1},  
                    {2, 2, 2, 2},  
                    {3, 3, 3, 3},  
                    {4, 4, 4, 4}};  
  
    int C[N][N]; // To store result  
    int i, j;  
    subtract(A, B, C);  
  
    cout << "Result matrix is " << endl;  
    for (i = 0; i < N; i++)  
    {  
        for (j = 0; j < N; j++)  
        cout << C[i][j] << " ";  
        cout << endl;  
    }  
	scaleradd(  a[][2]);
	scaler_mul( a[][2]);
	matric_add(a [][2]);
	matric_sub( a[][2]);
	matric_mul(a[][2]);
	transpose(a[][2]);
	determinant(A[][n]);
	adjoint(int a[][N], adj[][n]);
	inverse(int A[][n] , floatinverse[][n]);
	indentity ([][2]);


  system ("pause");
    return 0;  
} 

 
 
 